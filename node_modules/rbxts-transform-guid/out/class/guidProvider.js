"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GUIDProvider = void 0;
var uuid_1 = require("uuid");
var hashids_1 = __importDefault(require("hashids"));
var typescript_1 = __importDefault(require("typescript"));
var chalk_1 = __importDefault(require("chalk"));
var hashids = new hashids_1.default();
function getRndInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function generateGuid() {
    var len = getRndInteger(5, 16);
    var iterations = getRndInteger(2, 5);
    var value = "";
    for (var i = 0; i < iterations; i++) {
        value += Math.random().toString(36).substring(2, len);
    }
    var noNumbers = value.replace(/[0-9]/g, "");
    var randomCaps = noNumbers
        .toLowerCase()
        .split("")
        .map(function (c) {
        return Math.random() < 0.85 ? c : c.toUpperCase();
    })
        .join("");
    return randomCaps;
}
var GUIDProvider = /** @class */ (function () {
    function GUIDProvider(transformState) {
        this.transformState = transformState;
        this.labels = new Map();
    }
    GUIDProvider.prototype.hasStringForConstLabel = function (label) {
        return this.labels.has(label);
    };
    GUIDProvider.prototype.getGenerationTypeForEnum = function (enumerable, elseGenerationType) {
        var e_1, _a;
        var docTags = typescript_1.default.getJSDocTags(enumerable);
        try {
            for (var docTags_1 = __values(docTags), docTags_1_1 = docTags_1.next(); !docTags_1_1.done; docTags_1_1 = docTags_1.next()) {
                var tag = docTags_1_1.value;
                if (tag.tagName.text === "uuid") {
                    if (typeof tag.comment === "string" &&
                        ["hashids", "guidv4", "string"].includes(tag.comment)) {
                        return tag.comment;
                    }
                    return elseGenerationType;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (docTags_1_1 && !docTags_1_1.done && (_a = docTags_1.return)) _a.call(docTags_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    GUIDProvider.prototype.getStringForConstLabel = function (label, labelKind) {
        if (this.labels.has(label)) {
            return this.labels.get(label);
        }
        else {
            if (labelKind === "guidv4") {
                var uuid = (0, uuid_1.v4)();
                this.labels.set(label, uuid);
                this.transformState.logger.infoIfVerbose("Generate ".concat(chalk_1.default.yellow("GUIDv4"), " ").concat(chalk_1.default.cyan(uuid), " for ").concat(chalk_1.default.magenta(label)));
                return uuid;
            }
            else if (labelKind === "string") {
                var uuid = generateGuid();
                this.labels.set(label, uuid);
                this.transformState.logger.infoIfVerbose("Generate ".concat(chalk_1.default.yellow("string"), " ").concat(chalk_1.default.green("\"".concat(uuid, "\"")), " for ").concat(chalk_1.default.magenta(label)));
                return uuid;
            }
            else if (labelKind === "hashids") {
                var uuid = hashids.encode(this.labels.size, new Date().getTime());
                this.labels.set(label, uuid);
                this.transformState.logger.infoIfVerbose("Generate ".concat(chalk_1.default.yellow("hashid"), " ").concat(chalk_1.default.green("\"".concat(uuid, "\"")), " for ").concat(chalk_1.default.magenta(label)));
                return uuid;
            }
            else {
                throw "Unsupported";
            }
        }
    };
    return GUIDProvider;
}());
exports.GUIDProvider = GUIDProvider;
