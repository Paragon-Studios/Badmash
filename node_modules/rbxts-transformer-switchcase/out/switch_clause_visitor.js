"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clauseVisitor = void 0;
var ts = __importStar(require("typescript"));
var clause_statements_visitor_1 = __importDefault(require("./clause_statements_visitor"));
/**
 * Goes through each clause in a switch statement using the clauseStatementsVisitor,
 * to see whether each clause escapes and to get all its statements.
 * @returns every clause with it's content, along with a boolean indicating whether every clause escapes.
 */
function clauseVisitor(context, switchStatement) {
    var toReturn = {
        clauses: [],
        defaultClause: undefined,
        everyCaseClauseHasABreak: true
    };
    // go through every clause to see if they all use a break statement
    switchStatement.caseBlock.clauses.forEach(function (clause) {
        var _a = (0, clause_statements_visitor_1.default)(context, clause), clauseHasABreak = _a.hasABreak, currentClauseContent = _a.statements;
        // if no break was found, every becomes false
        // if it's already false it won't change
        toReturn.everyCaseClauseHasABreak && (toReturn.everyCaseClauseHasABreak = clauseHasABreak);
        if (toReturn.everyCaseClauseHasABreak) {
            if (ts.isCaseClause(clause)) {
                toReturn.clauses.push({
                    case: clause,
                    content: currentClauseContent
                });
            }
            else {
                if (toReturn.defaultClause) {
                    throw new Error("SwitchStatement has multiple DefaultClauses");
                }
                toReturn.defaultClause = {
                    case: clause,
                    content: currentClauseContent
                };
            }
        }
    });
    return toReturn;
}
exports.clauseVisitor = clauseVisitor;
exports.default = clauseVisitor;
