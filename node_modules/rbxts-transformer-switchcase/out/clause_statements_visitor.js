"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clauseStatementsVisitor = void 0;
var ts = __importStar(require("typescript"));
var escape_finder_1 = __importDefault(require("./escape_finder"));
/**
 * Goes through all the statements in a clause to see if one of them is an escape (using hasOrIsEscape).
 * @returns whether the clause escapes and whether
 */
function clauseStatementsVisitor(context, clause) {
    var toReturn = {
        hasABreak: false,
        statements: []
    };
    clause.statements.forEach(function (node) {
        if ((0, escape_finder_1.default)(context, node)) {
            toReturn.hasABreak = true;
            // only replace actual break statements with comments, if not disabled
            if (ts.isBreakStatement(node) && !context.config.disableBreakComments) {
                // create empty statement, because .addSyntheticTrailingComment() doesn't work
                var lastNode = ts.factory.createEmptyStatement();
                ts.addSyntheticLeadingComment(lastNode, ts.SyntaxKind.SingleLineCommentTrivia, "break", true);
                toReturn.statements.push(lastNode);
            }
            // only add nodes before the first break to the list (below)
            return;
        }
        if (!toReturn.hasABreak) {
            toReturn.statements.push(node);
        }
    });
    return toReturn;
}
exports.clauseStatementsVisitor = clauseStatementsVisitor;
exports.default = clauseStatementsVisitor;
