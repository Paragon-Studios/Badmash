"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ifEscapes = exports.switchEscapes = void 0;
var ts = __importStar(require("typescript"));
var escape_finder_1 = require("./escape_finder");
/**
 * Checks if each path in the given switch statement escapes.
 * @returns true if each path in the given switch escapes
 */
function switchEscapes(context, statement, accepted) {
    var foundDefaultClause = false;
    for (var _i = 0, _a = statement.caseBlock.clauses; _i < _a.length; _i++) {
        var clause = _a[_i];
        if (ts.isDefaultClause(clause)) {
            foundDefaultClause = true;
            break;
        }
    }
    //TODO allow switch that covers each case of an enum to not need a default clause
    if (!foundDefaultClause)
        return false;
    // escapes in a switch statement, that stop 2 clauses from being connected
    var clauseEscapes = {
        break: true,
        continue: false,
        return: false
    };
    // combine clauses without break into one
    var actualClauses = [[]];
    for (var _b = 0, _c = statement.caseBlock.clauses; _b < _c.length; _b++) {
        var clause = _c[_b];
        var hasBreak = (0, escape_finder_1.recursiveStatementHasEscape)(context, clause, clauseEscapes);
        // add clause onto last amalgamation
        actualClauses[actualClauses.length - 1].push(clause);
        // if current clause has no break, create new amalgamation for the next clause
        if (hasBreak) {
            actualClauses.push([]);
        }
    }
    var allAmalgamationsEscape = true;
    for (var _d = 0, actualClauses_1 = actualClauses; _d < actualClauses_1.length; _d++) {
        var amalgamation = actualClauses_1[_d];
        var lastClause = amalgamation[amalgamation.length - 1];
        // only check last clause, because if it escapes all previous clauses will also escape
        var foundEscape = (0, escape_finder_1.recursiveStatementHasEscape)(context, lastClause, accepted);
        allAmalgamationsEscape && (allAmalgamationsEscape = foundEscape);
        if (!foundEscape)
            break;
    }
    return allAmalgamationsEscape;
}
exports.switchEscapes = switchEscapes;
/**
 * Checks if each path in the given if else chain escapes.
 * @returns true if each path in the given if else chain escapes
 */
function ifEscapes(context, statement, accepted) {
    var paths = [];
    var deepest = statement;
    while (deepest) {
        var next = deepest.elseStatement;
        if (next == undefined) {
            //TODO allow if else chain that covers each case of an enum to not need a default clause
            // if else chain is missing a final else
            return false; // not all paths exist, so it's not possible that all paths escape
        }
        paths.push(next);
        if (ts.isIfStatement(next)) {
            deepest = next;
        }
        else {
            deepest = undefined;
        }
    }
    // check each path
    var allEscape = true;
    for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
        var path = paths_1[_i];
        var thisPathEscapes = (0, escape_finder_1.recursiveStatementHasEscape)(context, path, ts.clone(accepted));
        if (!thisPathEscapes) {
            allEscape = false;
            break;
        }
    }
    return allEscape;
}
exports.ifEscapes = ifEscapes;
