"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchVisitorFactory = void 0;
var ts = __importStar(require("typescript"));
var switch_clause_visitor_1 = __importDefault(require("./switch_clause_visitor"));
/**
 * Goes through every clause in a switch statement
 * to check whether each clause escapes using the switchClauseVisitor.
 * If every clause does, then it rebuilds everything into an if else chain.
 */
var switchVisitorFactory = function (context) {
    var switchVisitor = function (switchStatement) {
        var _a;
        // parse each clause, to see if it can be converted to ifs
        // and to get the statement contents of each clause
        var _b = (0, switch_clause_visitor_1.default)(context, switchStatement), everyCaseClauseHasABreak = _b.everyCaseClauseHasABreak, clauses = _b.clauses, defaultClause = _b.defaultClause;
        if (!everyCaseClauseHasABreak) {
            // keep going like normal
            return switchStatement;
        }
        // topBlock is default content, or last clause content
        var topNode;
        var defaultNode = defaultClause ? ts.factory.createBlock((_a = defaultClause === null || defaultClause === void 0 ? void 0 : defaultClause.content) !== null && _a !== void 0 ? _a : [], true) : undefined;
        clauses.reverse().forEach(function (clauseHolder) {
            var nextNode = ts.factory.createIfStatement(ts.factory.createBinaryExpression(switchStatement.expression, ts.factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken), clauseHolder.case.expression), ts.factory.createBlock(clauseHolder.content), topNode !== null && topNode !== void 0 ? topNode : defaultNode);
            topNode = nextNode;
        });
        if (topNode != undefined) {
            // add 'switch' comment (if not disabled)
            if (!context.config.disableSwitchComments) {
                ts.addSyntheticLeadingComment(topNode, ts.SyntaxKind.SingleLineCommentTrivia, "switch", true);
            }
            // go deeper like normal
            return ts.setOriginalNode(topNode, switchStatement);
        }
        throw new Error("Failed to convert switch statement to if else chain, switch statement is empty");
    };
    return switchVisitor;
};
exports.switchVisitorFactory = switchVisitorFactory;
exports.default = exports.switchVisitorFactory;
