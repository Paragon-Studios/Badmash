-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useState = _roact_hooked.useState
local function usePromise(promise, dependencies)
	if dependencies == nil then
		dependencies = {}
	end
	local _binding, setState = useState({
		status = TS.Promise.Status.Started,
	})
	local result = _binding.result
	local errorMessage = _binding.errorMessage
	local status = _binding.status
	useEffect(function()
		if status ~= TS.Promise.Status.Started then
			setState({
				status = TS.Promise.Status.Started,
			})
		end
		local _promise = promise
		local promiseToUse = if type(_promise) == "function" then promise() else promise
		local _arg0 = function(result)
			return setState({
				status = promiseToUse:getStatus(),
				result = result,
				errorMessage = errorMessage,
			})
		end
		local _arg1 = function(errorMessage)
			return setState({
				status = promiseToUse:getStatus(),
				result = result,
				errorMessage = errorMessage,
			})
		end
		promiseToUse:andThen(_arg0, _arg1)
		return function()
			promiseToUse:cancel()
		end
	end, dependencies)
	return result, errorMessage, status
end
return {
	usePromise = usePromise,
}
