/// <reference types="roact" />
import Roact from "@rbxts/roact";
/**
 * Subscribes to a binding and calls the callback when the value changes.
 * If the value is not a binding, this behaves like useEffect.
 * @param binding The binding or value to subscribe to.
 * @param callback The callback to call when the value changes.
 */
export declare function useBindingEvent<T>(binding: Roact.Binding<T> | T, callback: (value: T) => void): void;
/**
 * Returns the state of the binding wrapped in a `useState` hook. When the
 * value changes, the component will re-render.
 * @param binding The binding or value to get the state of.
 * @returns The value of the binding.
 */
export declare function useBindingState<T>(binding: Roact.Binding<T> | T): T;
