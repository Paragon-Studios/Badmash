-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useMutable = _roact_hooked.useMutable
local useState = _roact_hooked.useState
local _set_timeout = TS.import(script, script.Parent, "utils", "set-timeout")
local clearTimeout = _set_timeout.clearTimeout
local setTimeout = _set_timeout.setTimeout
--[[
	*
	* @see https://mantine.dev/hooks/use-debounced-value/
]]
local function useDebouncedValue(value, wait, options)
	if options == nil then
		options = {
			leading = false,
		}
	end
	local _value, setValue = useState(value)
	local mountedRef = useMutable(false)
	local timeoutRef = useMutable(nil)
	local cooldownRef = useMutable(false)
	local cancel = function()
		if timeoutRef.current then
			clearTimeout(timeoutRef.current)
		end
	end
	useEffect(function()
		if mountedRef.current then
			if not cooldownRef.current and options.leading then
				cooldownRef.current = true
				setValue(value)
			else
				cancel()
				timeoutRef.current = setTimeout(function()
					cooldownRef.current = false
					setValue(value)
				end, wait)
			end
		end
	end, { value, options.leading })
	useEffect(function()
		mountedRef.current = true
		return cancel
	end, {})
	return { _value, cancel }
end
return {
	useDebouncedValue = useDebouncedValue,
}
