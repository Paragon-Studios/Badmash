-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useMemo = _roact_hooked.useMemo
local useMutable = _roact_hooked.useMutable
local useDidMount = TS.import(script, script.Parent, "use-did-mount").useDidMount
local resolve = TS.import(script, script.Parent, "utils", "resolve").resolve
local _set_timeout = TS.import(script, script.Parent, "utils", "set-timeout")
local clearTimeout = _set_timeout.clearTimeout
local setTimeout = _set_timeout.setTimeout
local function useSequenceCallback(sequence, onUpdate, deps)
	if deps == nil then
		deps = {}
	end
	local updates = useMemo(function()
		return resolve(sequence.updates)
	end, deps)
	local callback = useMutable(onUpdate)
	callback.current = onUpdate
	local didMount = useDidMount()
	useEffect(function()
		if didMount and sequence.ignoreMount then
			return nil
		end
		local timeout
		local index = 0
		local runNext
		runNext = function()
			if index < #updates then
				local _binding = updates[index + 1]
				local delay = _binding[1]
				local func = _binding[2]
				timeout = setTimeout(function()
					callback.current(func())
					runNext()
				end, delay)
				index += 1
			end
		end
		runNext()
		return function()
			return clearTimeout(timeout)
		end
	end, { updates, didMount })
end
return {
	useSequenceCallback = useSequenceCallback,
}
