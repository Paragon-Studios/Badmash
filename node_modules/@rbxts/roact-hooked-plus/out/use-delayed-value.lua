-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useMemo = _roact_hooked.useMemo
local useState = _roact_hooked.useState
local _set_timeout = TS.import(script, script.Parent, "utils", "set-timeout")
local clearTimeout = _set_timeout.clearTimeout
local setTimeout = _set_timeout.setTimeout
local function clearUpdates(updates, laterThan)
	for id, update in updates do
		if laterThan == nil or update.resolveTime >= laterThan then
			updates[id] = nil
			clearTimeout(update.timeout)
		end
	end
end
local nextId = 0
local function useDelayedValue(value, delayMs)
	local delayedValue, setDelayedValue = useState(value)
	local updates = useMemo(function()
		return {}
	end, {})
	useEffect(function()
		local _original = nextId
		nextId += 1
		local id = _original
		local update = {
			timeout = setTimeout(function()
				setDelayedValue(value)
				updates[id] = nil
			end, delayMs),
			resolveTime = os.clock() + delayMs,
		}
		-- Clear all updates that are later than the current one to prevent overlap
		clearUpdates(updates, update.resolveTime)
		updates[id] = update
	end, { value })
	useEffect(function()
		return function()
			return clearUpdates(updates)
		end
	end, {})
	return delayedValue
end
return {
	clearUpdates = clearUpdates,
	useDelayedValue = useDelayedValue,
}
