-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local Interval
do
	Interval = setmetatable({}, {
		__tostring = function()
			return "Interval"
		end,
	})
	Interval.__index = Interval
	function Interval.new(...)
		local self = setmetatable({}, Interval)
		return self:constructor(...) or self
	end
	function Interval:constructor(callback, milliseconds, ...)
		local args = { ... }
		self.running = true
		task.defer(function()
			local clock = 0
			local hb
			hb = RunService.Heartbeat:Connect(function(step)
				clock += step
				if not self.running then
					hb:Disconnect()
				elseif clock >= milliseconds / 1000 then
					clock -= milliseconds / 1000
					callback(unpack(args))
				end
			end)
		end)
	end
	function Interval:clear()
		self.running = false
	end
end
local function setInterval(callback, milliseconds, ...)
	local args = { ... }
	return Interval.new(callback, milliseconds, unpack(args))
end
local function clearInterval(interval)
	local _result = interval
	if _result ~= nil then
		_result:clear()
	end
end
return {
	setInterval = setInterval,
	clearInterval = clearInterval,
	Interval = Interval,
}
