-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useMemo = _roact_hooked.useMemo
local clearUpdates = TS.import(script, script.Parent, "use-delayed-value").clearUpdates
local setTimeout = TS.import(script, script.Parent, "utils", "set-timeout").setTimeout
local nextId = 0
local function useDelayedEffect(effect, delayMs, deps)
	local updates = useMemo(function()
		return {}
	end, {})
	useEffect(function()
		local _original = nextId
		nextId += 1
		local id = _original
		local update = {
			timeout = setTimeout(function()
				effect()
				updates[id] = nil
			end, delayMs),
			resolveTime = os.clock() + delayMs,
		}
		-- Clear all updates that are later than the current one to prevent overlap
		clearUpdates(updates, update.resolveTime)
		updates[id] = update
	end, deps)
	useEffect(function()
		return function()
			return clearUpdates(updates)
		end
	end, {})
end
return {
	useDelayedEffect = useDelayedEffect,
}
