-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _roact_hooked = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src)
local useEffect = _roact_hooked.useEffect
local useRef = _roact_hooked.useRef
local UserInputService = TS.import(script, TS.getModule(script, "@rbxts", "services")).UserInputService
local DEFAULT_INPUTS = { Enum.UserInputType.MouseButton1, Enum.UserInputType.Touch }
local function contains(object, mouse)
	return object.AbsolutePosition.X <= mouse.X and (object.AbsolutePosition.Y <= mouse.Y and (object.AbsolutePosition.X + object.AbsoluteSize.X >= mouse.X and object.AbsolutePosition.Y + object.AbsoluteSize.Y >= mouse.Y))
end
--[[
	*
	* @see https://mantine.dev/hooks/use-click-outside/
]]
local function useClickOutside(handler, inputs, instances)
	if inputs == nil then
		inputs = DEFAULT_INPUTS
	end
	local ref = useRef()
	useEffect(function()
		local listener = function(input)
			local instance = ref:getValue()
			local _instances = instances
			if type(_instances) == "table" then
				local _instances_1 = instances
				local _arg0 = function(obj)
					return obj ~= nil and not contains(obj, input.Position)
				end
				-- ▼ ReadonlyArray.every ▼
				local _result = true
				for _k, _v in _instances_1 do
					if not _arg0(_v, _k - 1, _instances_1) then
						_result = false
						break
					end
				end
				-- ▲ ReadonlyArray.every ▲
				local shouldTrigger = _result
				if shouldTrigger then
					handler()
				end
			elseif instance ~= nil and not contains(instance, input.Position) then
				handler()
			end
		end
		local handle = UserInputService.InputBegan:Connect(function(input)
			local _inputs = inputs
			local _userInputType = input.UserInputType
			if table.find(_inputs, _userInputType) ~= nil then
				listener(input)
			end
		end)
		return function()
			handle:Disconnect()
		end
	end, { ref, handler, instances })
	return ref
end
return {
	useClickOutside = useClickOutside,
}
