/// <reference types="@rbxts/compiler-types" />
/// <reference types="roact" />
/// <reference types="@rbxts/types" />
import { Instant, Linear, Spring } from "@rbxts/flipper";
import { Binding } from "@rbxts/roact";
type GoalCtor = typeof Spring | typeof Linear;
type GoalFunction<T extends GoalCtor, U> = (value: U, ctor: T, options?: ConstructorParameters<T>[1]) => Binding<U>;
declare const motorHooks: Partial<Record<keyof CheckableTypes, GoalFunction<GoalCtor, any>>>;
export declare function useAnimation<T extends CheckableTypes[keyof typeof motorHooks]>(value: T, ctor?: typeof Instant, options?: never): Binding<T>;
export declare function useAnimation<T extends CheckableTypes[keyof typeof motorHooks]>(value: T, ctor?: typeof Spring, options?: ConstructorParameters<typeof Spring>[1]): Binding<T>;
export declare function useAnimation<T extends CheckableTypes[keyof typeof motorHooks]>(value: T, ctor?: typeof Linear, options?: ConstructorParameters<typeof Linear>[1]): Binding<T>;
export {};
