-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local useEffect = TS.import(script, TS.getModule(script, "@rbxts", "roact-hooked").src).useEffect
local UserInputService = TS.import(script, TS.getModule(script, "@rbxts", "services")).UserInputService
local function isHotkeyPressed(hotkey)
	local _exp = UserInputService:GetKeysPressed()
	local _arg0 = function(key)
		return key.KeyCode
	end
	-- ▼ ReadonlyArray.map ▼
	local _newValue = table.create(#_exp)
	for _k, _v in _exp do
		_newValue[_k] = _arg0(_v, _k - 1, _exp)
	end
	-- ▲ ReadonlyArray.map ▲
	local keysDown = _newValue
	local _hotkey = hotkey
	local _arg0_1 = function(key)
		local _key = key
		if type(_key) == "string" then
			local _arg0_2 = Enum.KeyCode[key]
			return table.find(keysDown, _arg0_2) ~= nil
		else
			local _key_1 = key
			return table.find(keysDown, _key_1) ~= nil
		end
	end
	-- ▼ ReadonlyArray.every ▼
	local _result = true
	for _k, _v in _hotkey do
		if not _arg0_1(_v, _k - 1, _hotkey) then
			_result = false
			break
		end
	end
	-- ▲ ReadonlyArray.every ▲
	return _result
end
local function useHotkeys(hotkeys)
	useEffect(function()
		local handle = UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
				local _hotkeys = hotkeys
				local _arg0 = function(_param)
					local hotkey = _param[1]
					local event = _param[2]
					local _name = input.KeyCode.Name
					local _condition = table.find(hotkey, _name) ~= nil
					if _condition then
						_condition = isHotkeyPressed(hotkey)
					end
					if _condition then
						event()
					end
				end
				for _k, _v in _hotkeys do
					_arg0(_v, _k - 1, _hotkeys)
				end
			end
		end)
		return function()
			handle:Disconnect()
		end
	end, { hotkeys })
end
return {
	useHotkeys = useHotkeys,
}
