-- Compiled with roblox-ts v2.0.2
local TS = _G[script]
local Object = TS.import(script, TS.getModule(script, "@rbxts", "object-utils"))
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
local populateInstanceMap = TS.import(script, script.Parent.Parent, "util", "populateInstanceMap").populateInstanceMap
local createClientHandler = TS.import(script, script.Parent, "createClientHandler").createClientHandler
local createServerHandler = TS.import(script, script.Parent, "createServerHandler").createServerHandler
local function createNetworkingEvent(globalName, serverEvents, clientEvents, serverMiddleware, clientMiddleware)
	local networkInfos = {}
	local remotes = {}
	populateInstanceMap("RemoteEvent", "events-" .. globalName, Object.keys(serverEvents), remotes)
	populateInstanceMap("RemoteEvent", "events-" .. globalName, Object.keys(clientEvents), remotes)
	for name in remotes do
		local _arg1 = {
			eventType = "Event",
			globalName = globalName,
			name = name,
		}
		networkInfos[name] = _arg1
	end
	if RunService:IsServer() then
		return {
			server = createServerHandler(remotes, networkInfos, serverEvents, clientEvents, serverMiddleware),
			client = nil,
		}
	else
		return {
			server = nil,
			client = createClientHandler(remotes, networkInfos, serverEvents, clientEvents, clientMiddleware),
		}
	end
end
return {
	createNetworkingEvent = createNetworkingEvent,
}
