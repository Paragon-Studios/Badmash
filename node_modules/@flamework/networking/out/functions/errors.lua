-- Compiled with roblox-ts v2.0.2
local TS = _G[script]
local t = TS.import(script, TS.getModule(script, "@rbxts", "t").lib.ts).t
local isNetworkingFunctionError = t.union(t.literal("Timeout"), t.literal("Cancelled"), t.literal("BadRequest"), t.literal("Unprocessed"), t.literal("InvalidResult"))
local NetworkingFunctionError
do
	local _inverse = {}
	NetworkingFunctionError = setmetatable({}, {
		__index = _inverse,
	})
	NetworkingFunctionError.Timeout = "Timeout"
	_inverse.Timeout = "Timeout"
	NetworkingFunctionError.Cancelled = "Cancelled"
	_inverse.Cancelled = "Cancelled"
	NetworkingFunctionError.BadRequest = "BadRequest"
	_inverse.BadRequest = "BadRequest"
	NetworkingFunctionError.Unprocessed = "Unprocessed"
	_inverse.Unprocessed = "Unprocessed"
	NetworkingFunctionError.InvalidResult = "InvalidResult"
	_inverse.InvalidResult = "InvalidResult"
end
local function getFunctionError(value)
	local _value = value
	if type(_value) == "boolean" then
		return if value == false then NetworkingFunctionError.Unprocessed else nil
	elseif isNetworkingFunctionError(value) then
		return value
	end
end
return {
	getFunctionError = getFunctionError,
	isNetworkingFunctionError = isNetworkingFunctionError,
	NetworkingFunctionError = NetworkingFunctionError,
}
